// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

// Users
model User {
  id         Int    @id @default(autoincrement())
  name       String
  email      String @unique
  password   String
  profilePic String
  bio        String
  type       String
  certified  String

  Pet          Pet[]
  Donation     Donation[]
  Post         Post[]
  PostComment  PostComment[]
  ForumMessage ForumMessage[]
  ForumReply   ForumReply[]
  ChatSent     Chat[]         @relation("sentMessage")
  ChatReceived Chat[]         @relation("receivedMessage")
  PostLikes    PostLike[]
  Notification Notification[]
}

model Donation {
  id             Int     @id @default(autoincrement())
  userId         Int
  petPic         String
  petName        String
  petDescription String
  petType        String
  petGender      String
  petSpayed      Boolean @default(false)
  petVaccinated  Boolean @default(false)
  contact        String
  donationAuthor User    @relation(fields: [userId], references: [id])
}

model Post {
  id          Int        @id @default(autoincrement())
  userId      Int
  pic         String
  description String
  postAuthor  User       @relation(fields: [userId], references: [id])
  PostLikes   PostLike[] // Relação com a tabela de curtidas (PostLike)

  PostComment PostComment[]
}

model PostLike {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model PostComment {
  id            Int    @id @default(autoincrement())
  postId        Int
  userId        Int
  description   String
  post          Post   @relation(fields: [postId], references: [id])
  commentAuthor User   @relation(fields: [userId], references: [id])
}

model ForumMessage {
  id                 Int    @id @default(autoincrement())
  userId             Int
  title              String
  description        String
  forumMessageAuthor User   @relation(fields: [userId], references: [id])

  ForumReply ForumReply[]
}

model ForumReply {
  id             Int    @id @default(autoincrement())
  forumMessageId Int
  userId         Int
  description    String

  forumMessage     ForumMessage @relation(fields: [forumMessageId], references: [id])
  forumReplyAuthor User         @relation(fields: [userId], references: [id])
}

model Chat {
  id                Int      @id @default(autoincrement())
  sentMessageId     Int
  receivedMessageId Int
  message           String
  created_at        DateTime @default(now())

  sentMessage     User @relation("sentMessage", fields: [sentMessageId], references: [id])
  receivedMessage User @relation("receivedMessage", fields: [receivedMessageId], references: [id])
}

// Pets
model Pet {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  birthDate DateTime
  breed     String
  size      String
  type      String
  gender    String
  tutor     User     @relation(fields: [userId], references: [id])

  ImmunizationControl ImmunizationControl[]
  WeightControl       WeightControl[]
  MedicinesControl    MedicinesControl[]
}

model ImmunizationControl {
  id            Int      @id @default(autoincrement())
  petId         Int
  vaccineName   String
  date          DateTime
  vetName       String
  vaccineRepeat DateTime
  pet           Pet      @relation(fields: [petId], references: [id])
}

model WeightControl {
  id         Int      @id @default(autoincrement())
  petId      Int
  weight     Int
  weightDate DateTime
  pet        Pet      @relation(fields: [petId], references: [id])
}

// Essa model junta a EctoparasitesControl e a VerminosisControl
model MedicinesControl {
  id               Int      @id @default(autoincrement())
  petId            Int
  medicineCategory String
  medicineName     String
  medicineDate     DateTime
  medicineRepeat   DateTime
  pet              Pet      @relation(fields: [petId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
